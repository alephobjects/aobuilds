# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("fedora-slave", "******"),
		BuildSlave("debian-slave", "******"),
		BuildSlave("mac-slave", "******"),
		BuildSlave("windows-slave", "******")]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        'https://code.alephobjects.com/diffusion/CURA/cura.git',
        workdir='gitpoller-workdir', branch='devel',
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes. 

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
fedora_versions = ['fedora-22-i386', 'fedora-22-x86_64',
		   'fedora-23-i386', 'fedora-23-x86_64']

buildersNames = fedora_versions + ["mac-osx", "windows"]

c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(branch='devel'),
                            treeStableTimer=300,
                            builderNames=buildersNames))
c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=buildersNames))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.shell import ShellCommand, SetPropertyFromCommand
from buildbot.steps.source.git import Git
from buildbot.process.properties import Interpolate
from buildbot.steps.transfer import DirectoryUpload, FileUpload

# check out the source
curadevel = Git(repourl='https://code.alephobjects.com/diffusion/CURA/cura.git', mode='incremental', branch='devel')
get_build_number = SetPropertyFromCommand(command="cat Cura/version", property="build_number")
fedorafactories = {}
for version in fedora_versions:
  fedorapkg = ShellCommand(command=["./package.sh", "fedora", "/etc/mock/" + version + ".cfg"], haltOnFailure=True)
  fedoraup = DirectoryUpload(slavesrc="scripts/linux/fedora/RPMS/" + version,
                                masterdest="public_html/releases",
                                url="/releases")
  fedorafactories[version] = BuildFactory([curadevel, fedorapkg, fedoraup])
macfactory = BuildFactory([curadevel])
macfactory.addStep(ShellCommand(command=["./package.sh", "darwin"], haltOnFailure=True))
macfactory.addStep(get_build_number)
macfactory.addStep(FileUpload(slavesrc=Interpolate('Cura-%(prop:build_number)s-MacOS.dmg'),
                                masterdest=Interpolate("public_html/releases/Cura-%(prop:build_number)s-MacOS.dmg"),
                                url=Interpolate("/releases/Cura-%(prop:build_number)s-MacOS.dmg")))
winfactory = BuildFactory([curadevel])
winfactory.addStep(ShellCommand(command=["c:\\mingw\\msys\\1.0\\bin\\bash.exe", "-cl", "./package.sh win32"],
				env={'HOME' : '.'}, haltOnFailure=True))
winfactory.addStep(get_build_number)
winfactory.addStep(FileUpload(slavesrc=Interpolate('Cura_%(prop:build_number)s.exe'),
                                masterdest=Interpolate("public_html/releases/Cura_%(prop:build_number)s.exe"),
                                url=Interpolate("/releases/Cura_%(prop:build_number)s.exe")))

from buildbot.config import BuilderConfig
from buildbot import locks

fedora_lock = locks.SlaveLock("fedora_slave", maxCount = 1)

c['builders'] = []
for version in fedora_versions:
  c['builders'].append(BuilderConfig(name=version,
      slavenames=["fedora-slave"],
      factory=fedorafactories[version],
      locks=[fedora_lock.access('counting')]))
c['builders'].append(
    BuilderConfig(name="mac-osx",
      slavenames=["mac-slave"],
      factory=macfactory))
c['builders'].append(
    BuilderConfig(name="windows",
      slavenames=["windows-slave"],
      factory=winfactory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.status import words

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("******","******")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',  # ..or this
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))
c['status'].append(words.IRC(host="irc.freenode.com", nick="curabuilds",
                             channels=["#alephobjects"],
			     notify_events={'started': 1, 'finished':1, 'exception':1}))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Cura"
c['titleURL'] = "https://code.alephobjects.com/project/profile/1/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://curabb.is-leet.com:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
